from filters import IsUser
from aiogram.types import Message
from aiogram.types import CallbackQuery
from loader import db
from loader import bot
from aiogram.types.chat import ChatActions

from keyboards.inline.products_from_catalog import product_markup, product_cb
from keyboards.inline.categories import category_cb, categories_markup
from .menu import catalog
from loader import dp


@dp.message_handler(IsUser(), text=catalog)
async def process_catalog(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∫–∏–∫ –≤—ã–≤–æ–¥–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:',
                         reply_markup=categories_markup())


@dp.callback_query_handler(IsUser(), category_cb.filter(action='view'))
async def category_callback_handler(query: CallbackQuery, callback_data: dict):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤—ã–≤–æ–¥—É –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    # –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –µ–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    # categories.py - —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ —Å–ª–æ–≤–∞—Ä—å callback_data —Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –¢–∞–º –µ—Å—Ç—å –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = db.fetchall('''SELECT * FROM products product
    WHERE product.tag = (SELECT title FROM categories WHERE idx=?) 
    AND product.idx NOT IN (SELECT idx FROM cart WHERE cid = ?)''',
                           (callback_data['id'], query.message.chat.id))

    await query.answer('–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.')
    await show_products(query.message, products)


async def show_products(m, products):

    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç, —Ç–æ –≤—ã–≤–µ–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if len(products) == 0:

        await m.answer('–ó–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç üò¢')

    else:

        # –í–∫–ª—é—á–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –ø–µ—á–∞—Ç–∏ —á–µ–ª–æ–≤–µ–∫–æ–º
        await bot.send_chat_action(m.chat.id, ChatActions.TYPING)

        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ñ–æ—Ç–æ, —Ü–µ–Ω—É
        for idx, title, body, image, price, _ in products:

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
            markup = product_markup(idx, price)
            text = f'<b>{title}</b>\n\n{body}'

            # –í—ã–≤–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ —Å —Ñ–æ—Ç–æ, –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            await m.answer_photo(photo=image,
                                 caption=text,
                                 reply_markup=markup)


@dp.callback_query_handler(IsUser(), product_cb.filter(action='add'))
async def add_product_callback_handler(query: CallbackQuery,
                                       callback_data: dict):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""

    # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–∫—É—â–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É —Å –∫–æ—Ä–∑–∏–Ω–æ–π —Ç–æ–≤–∞—Ä–æ–≤.
    # –¢–∞–∫–∂–µ, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (callback_data['id']), —É–∫–∞–∑—ã–≤–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞
    db.query('INSERT INTO cart VALUES (?, ?, 1)',
             (query.message.chat.id, callback_data['id']))

    await query.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')
    await query.message.delete()
