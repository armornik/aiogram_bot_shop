from filters import IsUser
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.types.chat import ChatActions
import logging


from loader import db, dp, bot
from .menu import cart
from keyboards.inline.products_from_cart import product_markup
from keyboards.inline.products_from_catalog import product_cb
from keyboards.default.markups import *
from states import CheckoutState


@dp.message_handler(IsUser(), text=cart)
async def process_cart(message: Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã"""

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cart_data = db.fetchall(
        'SELECT * FROM cart WHERE cid=?', (message.chat.id,))

    # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if len(cart_data) == 0:
        await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')

    else:

        await bot.send_chat_action(message.chat.id, ChatActions.TYPING)

        # –ù–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        async with state.proxy() as data:
            data['products'] = {}

        # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–∞–≤–Ω—è–µ—Ç—Å—è –Ω—É–ª—é
        order_cost = 0

        # –û–±—Ö–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã. –ù–∞–º –Ω—É–∂–Ω—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞ –∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        for _, idx, count_in_cart in cart_data:

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
            product = db.fetchone('SELECT * FROM products WHERE idx=?', (idx,))

            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ —É–∂–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å –∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            if product is None:
                db.query('DELETE FROM cart WHERE idx=?', (idx,))

            else:
                # –†–∞—Å–∫—Ä–æ–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—ä–µ–∫—Ç–∞-—Ç–æ–≤–∞—Ä–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ñ–æ—Ç–æ, —Ü–µ–Ω–∞
                _, title, body, image, price, _ = product

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
                order_cost += price

                # –î–æ–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. –ö–ª—é—á–æ–º –±—É–¥–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞,
                # –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º ‚Äì —Å–ø–∏—Å–æ–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–æ–≤–∞—Ä–∞
                async with state.proxy() as data:
                    data['products'][idx] = [title, price, count_in_cart]

                # –ë–µ—Ä–µ–º –Ω–∞—à –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
                markup = product_markup(idx, count_in_cart)
                text = f'<b>{title}</b>\n\n{body}\n\n–¶–µ–Ω–∞: {price}‚ÇΩ.'

                # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
                await message.answer_photo(photo=image,
                                           caption=text,
                                           reply_markup=markup)

        # –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º, —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é
        if order_cost != 0:
            markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
            markup.add('üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')

            await message.answer('–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é?',
                                 reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsUser(), product_cb.filter(action='count'))
@dp.callback_query_handler(IsUser(), product_cb.filter(action='increase'))
@dp.callback_query_handler(IsUser(), product_cb.filter(action='decrease'))
async def product_callback_handler(query: CallbackQuery, callback_data: dict,
                                   state: FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã"""

    # –ò–∑ —Å–ª–æ–≤–∞—Ä—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞ –∏ —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
    idx = callback_data['id']
    action = callback_data['action']

    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç, —Ç.–µ. –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –ø—Ä–æ—Å—Ç–æ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è process_cart()
    # –∏ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω–µ. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –º—ã —É–≤–∏–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    if 'count' == action:
        async with state.proxy() as data:
            if 'products' not in data.keys():
                await process_cart(query.message, state)
            else:
                await query.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - ' + data['products'][idx][2])

    else:

        async with state.proxy() as data:

            if 'products' not in data.keys():

                await process_cart(query.message, state)

            else:
                # –ï—Å–ª–∏ –∂–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, –º—ã –∏–ª–∏ —É–≤–µ–ª–∏—á–∏–º, –∏–ª–∏ —É–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                data['products'][idx][2] += 1 if 'increase' == action else -1
                # –£ –Ω–∞—Å –±—É–¥–µ—Ç –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                count_in_cart = data['products'][idx][2]

                # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–≤–Ω–æ –Ω—É–ª—é, —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–æ—Å—Ç–æ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å
                if count_in_cart == 0:
                    db.query('''DELETE FROM cart
                    WHERE cid = ? AND idx = ?''', (query.message.chat.id, idx))
                    await query.message.delete()

                else:

                    # –ò–Ω–∞—á–µ –º—ã –æ–±–Ω–æ–≤–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —ç—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç—Ä–∞–∑–∏–º –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞
                    db.query('''UPDATE cart 
                    SET quantity = ? 
                    WHERE cid = ? AND idx = ?''',
                             (count_in_cart, query.message.chat.id, idx))

                    await query.message.edit_reply_markup(
                        product_markup(idx, count_in_cart))


@dp.message_handler(IsUser(), text='üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
async def process_checkout(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞"""

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–∞
    await CheckoutState.check_cart.set()
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await checkout(message, state)


async def checkout(message, state):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    answer = ''
    total_price = 0

    # –û–ø–∏—Ä–∞—è—Å—å –Ω–∞ –æ–±—ä–µ–∫—Ç-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–æ–≤–∞—Ä—è-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    async with state.proxy() as data:

        # –ò–∑ —Å–ª–æ–≤–∞—Ä—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        for title, price, count_in_cart in data['products'].values():

            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            tp = count_in_cart * price
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            answer += f'<b>{title}</b> * {count_in_cart}—à—Ç. = {tp}‚ÇΩ\n'
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
            total_price += tp

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(f'{answer}\n–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_price}‚ÇΩ.',
                         reply_markup=check_markup())


@dp.message_handler(IsUser(),
                    lambda message: message.text not in [all_right_message,
                                                         back_message],
                    state=CheckoutState.check_cart)
async def process_check_cart_invalid(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Ç–æ—Ç —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –±–æ—Ç—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await message.reply('–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ –±—ã–ª–æ.')


@dp.message_handler(IsUser(), text=back_message,
                    state=CheckoutState.check_cart)
async def process_check_cart_back(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞"""
    await state.finish()
    await process_cart(message, state)


@dp.message_handler(IsUser(), text=all_right_message,
                    state=CheckoutState.check_cart)
async def process_check_cart_all_right(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    await CheckoutState.next()
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –∏–º—è.',
                         reply_markup=back_markup())


@dp.message_handler(IsUser(), text=back_message, state=CheckoutState.name)
async def process_name_back(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏"""
    await CheckoutState.check_cart.set()
    await checkout(message, state)


@dp.message_handler(IsUser(), state=CheckoutState.name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞"""

    # –†–∞–±–æ—Ç–∞–µ–º —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ –∏–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞
    async with state.proxy() as data:

        data['name'] = message.text

        # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å —É–∂–µ —É–∫–∞–∑–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –≤–∫–ª—é—á–∞–µ–º
        # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (confirm)
        if 'address' in data.keys():
            await confirm(message)
            await CheckoutState.confirm.set()

        # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –µ—â–µ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —É–∫–∞–∑–∞—Ç—å –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ address
        else:
            await CheckoutState.next()
            await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞.',
                                 reply_markup=back_markup())


@dp.message_handler(IsUser(), text=back_message, state=CheckoutState.address)
async def process_address_back(message: Message, state: FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏"""

    async with state.proxy() as data:

        await message.answer('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è —Å <b>' + data['name'] + '</b>?',
                             reply_markup=back_markup())

    await CheckoutState.name.set()


@dp.message_handler(IsUser(), state=CheckoutState.address)
async def process_address(message: Message, state: FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""

    async with state.proxy() as data:
        data['address'] = message.text

    await confirm(message)
    await CheckoutState.next()


async def confirm(message):
    await message.answer(
        '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑.',
        reply_markup=confirm_markup())


@dp.message_handler(IsUser(),
                    lambda message: message.text not in [confirm_message,
                                                         back_message],
                    state=CheckoutState.confirm)
async def process_confirm_invalid(message: Message):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –º—ã –≤–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç"""
    await message.reply('–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ –±—ã–ª–æ.')


@dp.message_handler(IsUser(), text=back_message, state=CheckoutState.confirm)
async def process_confirm(message: Message, state: FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∞–¥—Ä–µ—Å–∞"""

    await CheckoutState.address.set()

    async with state.proxy() as data:
        await message.answer('–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å —Å <b>' + data['address'] + '</b> –Ω–∞ –¥—Ä—É–≥–æ–π?',
                             reply_markup=back_markup())


@dp.message_handler(IsUser(), text=confirm_message,
                    state=CheckoutState.confirm)
async def process_confirm(message: Message, state: FSMContext):
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""

    markup = ReplyKeyboardRemove()

    logging.info('Deal was made.')

    async with state.proxy() as data:
        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cid = message.chat.id

        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π —Ç–æ–≤–∞—Ä–æ–≤, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤, –≥–¥–µ –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å—Ç—Ä–æ–∫–æ–π
        # —Ñ–æ—Ä–º–∞—Ç–∞: 'a9cef291062dba543eb97fe5887928f0=1' –°–ø—Ä–∞–≤–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞, –∞ —Å–ª–µ–≤–∞ ‚Äì –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
        products = [idx + '=' + str(quantity)
                    for idx, quantity in db.fetchall('''SELECT idx, quantity FROM cart
        WHERE cid=?''', (cid,))]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–∫–∞–∑–∞–º–∏ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        db.query('INSERT INTO orders VALUES (?, ?, ?, ?)',
                 (cid, data['name'], data['address'], ' '.join(products)))

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        db.query('DELETE FROM cart WHERE cid=?', (cid,))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            '–û–∫! –í–∞—à –∑–∞–∫–∞–∑ —É–∂–µ –≤ –ø—É—Ç–∏ üöÄ\n–ò–º—è: <b>' + data[
                'name'] + '</b>\n–ê–¥—Ä–µ—Å: <b>' + data['address'] + '</b>',
            reply_markup=markup)

    await state.finish()
